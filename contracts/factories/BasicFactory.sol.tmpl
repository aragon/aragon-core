/*
{{ disclaimer }}
*/

pragma solidity ^0.4.11;

import "../tokens/MiniMeIrrevocableVestedToken.sol";
import "../dao/DAO.sol";
import "../organs/MetaOrgan.sol";
import "../apps/Application.sol";
import "../apps/ownership/OwnershipApp.sol";
import "../apps/bylaws/BylawsApp.sol";
import "./ForwarderFactory.sol";

contract BasicFactory {
    event DeployedDAO(address dao);
    address public kernel;
    ForwarderFactory public forwarderFactory;
    {{#organs}}
    address public {{name}};
    {{/organs}}

    {{#apps}}
    address public {{name}};
    {{/apps}}

    function BasicFactory(address _kernel, ForwarderFactory _forwarderFactory, {{#organs}}address _{{name}}, {{/organs}}{{#apps}}address _{{name}}{{^last}}, {{/last}}{{/apps}}) {
        kernel = _kernel;
        forwarderFactory = _forwarderFactory;
        {{#organs}}
        {{name}} = _{{name}};
        {{/organs}}
        {{#apps}}
        {{name}} = _{{name}};
        {{/apps}}
    }

    function create(string _tokenName, string _tokenSymbol, bool _testrpc) {
        MiniMeIrrevocableVestedToken token = new MiniMeIrrevocableVestedToken(0, 0, 0, _tokenName, 1, _tokenSymbol, true);
        DAO dao = new DAO(kernel);
        token.changeController(address(dao));
        installOrgans(MetaOrgan(dao));
        address bylawsApp = installApps(MetaOrgan(dao), _testrpc);
        issueToken(address(dao), address(token));
        installBylaws(BylawsApp(bylawsApp), BylawsApp(address(dao)));
        MetaOrgan(dao).setPermissionsOracle(bylawsApp);
        // TODO: set status for sender

        DeployedDAO(dao);
    }

    function installOrgans(MetaOrgan dao) internal {
        {{#organs}}
        bytes4[] memory {{name}}Sigs = new bytes4[]({{sigs.length}});
        {{#sigs}}
        {{../name}}Sigs[{{@index}}] = o{{@../index}}_s{{@index}}; // {{name}}
        {{/sigs}}
        dao.installOrgan({{name}}, {{name}}Sigs);

        {{/organs}}
    }

    function installApps(MetaOrgan dao, bool _testrpc) internal returns (address app) {
        {{#apps}}
        // Proxies are not working on testrpc, that's why for testing no proxy is created
        Application deployed{{name}} = Application(_testrpc ? {{name}} : forwarderFactory.createForwarder({{name}}));
        deployed{{name}}.setDAO(address(dao));
        bytes4[] memory {{name}}Sigs = new bytes4[]({{sigs.length}});
        {{#sigs}}
        {{../name}}Sigs[{{@index}}] = a{{@../index}}_s{{@index}}; // {{name}}
        {{/sigs}}
        dao.installApp(deployed{{name}}, {{name}}Sigs);

        {{/apps}}
        return deployed{{apps.0.name}}; // first app is bylaws
    }

    function installBylaws(BylawsApp bylaws, BylawsApp dao_bylaws) internal {
        {{#bylaws}}
        {{#if bylaw.status}}
        uint bylaw_{{id}} = bylaws.setStatusBylaw({{bylaw.status.[0]}}, false, false);
        {{/if}}
        {{#if bylaw.voting}}
        uint bylaw_{{id}} = bylaws.setVotingBylaw(pct({{bylaw.voting.[0]}}), pct({{bylaw.voting.[1]}}), 1 days, 7 days, false);
        {{/if}}
        {{#if bylaw.address}}
        uint bylaw_{{id}} = bylaws.setAddressBylaw({{bylaw.address.[0]}}, false, false);
        {{/if}}
        {{/bylaws}}

        {{#organs}}
        {{#sigs}}
        {{#if bylaw}}
        dao_bylaws.linkBylaw(o{{@../index}}_s{{@index}}, bylaw_{{bylaw}}); // {{name}}
        {{/if}}
        {{/sigs}}
        {{/organs}}
        {{#apps}}
        {{#sigs}}
        {{#if bylaw}}
        dao_bylaws.linkBylaw(a{{@../index}}_s{{@index}}, bylaw_{{bylaw}}); // {{name}}
        {{/if}}
        {{/sigs}}
        {{/apps}}
    }

    function pct(uint x) internal constant returns (uint) {
        return x * 10 ** 16;
    }

    function issueToken(address dao, address token) internal {
        OwnershipApp(dao).addToken(address(token), 1, 1, 1);
        OwnershipApp(dao).grantTokens(address(token), msg.sender, 1);
    }

    {{#organs}}
    // {{name}}
    {{#sigs}}
    bytes4 constant o{{@../index}}_s{{@index}} = {{bytes}}; // {{name}}
    {{/sigs}}
    {{/organs}}
    {{#apps}}
    // {{name}}
    {{#sigs}}
    bytes4 constant a{{@../index}}_s{{@index}} = {{bytes}}; // {{name}}
    {{/sigs}}
    {{/apps}}
}
